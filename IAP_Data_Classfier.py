# -*- coding: utf-8 -*-
"""Untitled45.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17dq1Fsjv1t0x7gHYPFd-GEHB0V-xhSw7
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

from google.colab import files

uploaded = files.upload()

data = pd.read_csv(io.BytesIO(uploaded['IAP_Transaction_History_For_20190603.csv']))

data.shape

data.head()

data.info()

data.isnull().sum()

data.corr()

data.drop(['ManualCashbackStatusCode','ManualCashbackStatusDesc','ManualCashbackProcessedTime','UpdatedBy'],axis=1,inplace=True)

data.drop(['CashbackType','InstantCashBackStatusCode','InstantCashBackStatusDesc','InstantCashBackProcessedTime'],axis=1,inplace=True)

data.drop(['PromoTxnErrorCode','PromoTxnErrorDesc','ServiceDescription','CashbackAmount'],axis=1,inplace=True)

data.drop(['ServiceDeliveryUpdateTime','ServiceDeliveryStatusHistory','NoOftimesUpdated','EligibleForInstantCashback'],axis=1,inplace=True)

data.drop(['CashbackProcessed','ServiceCategory','PromoCode','ServiceDeliveryStatus'],axis=1,inplace=True)

data.drop(['Abort_Status_Code','Abort_Message','AuthTokenHash','PromoTxnId'],axis=1,inplace=True)

data.drop(['Txn_Overall_Time','Charge_Ip','Charge_Error','Breadcrumb'],axis=1,inplace=True)

data.isnull().sum()

data.shape

data.head()

data.describe()

data.corr()

data.drop(['bankID','acquirerProgramId','txnCurrency'],axis=1,inplace=True)

data.drop(['dataPickUpStatusCode','statusCode','txnAmountInImpliedDecimal','Guest_IAP'],axis=1,inplace=True)

data.shape

from pandas .plotting import scatter_matrix

data.info()

data['status3ds'].value_counts()

data['status3ds'] = data['status3ds'].fillna(data['status3ds'].mode()[0])

data.shape

data.drop(['txnDescription'],axis=1,inplace=True)

data.shape

data.drop(['pan'],axis=1,inplace=True)

data['authStatus'].value_counts()

data['authStatus'] = data['authStatus'].fillna(data['authStatus'].mode()[0])

data['merchantName'].value_counts()

data.drop(['wibmoTxnID','merchantID','merchantTxnID','wibmoAccountNumber','status','pgVoidTxnID','mdf_2','mdf_3','creditDebitCardFlag','Guest_Mobile','Guest_Email','Mpi_Txn_Id'],axis=1,inplace=True)

data.shape

data['pgErrorDesc'].value_counts()

data['pgErrorDesc'] = data['pgErrorDesc'].fillna('-'[0])

data['mdf_1'].value_counts()

data['mdf_1'] = data['mdf_1'].fillna(data['mdf_1'].mode()[0])

data.info()

sns.heatmap(data.isnull(),yticklabels=False,cbar=False,cmap='coolwarm')

data.drop(['wibmoUserID','pgTxnID'],axis=1,inplace=True)

data.shape

data.drop(['txnStartDate','txnEndDate'],axis=1,inplace=True)

data.columns

data['Agent_Comments'].value_counts()

data["Agent_Comments"]= data["Agent_Comments"].replace('-', "0")

data['Agent_Comments'].value_counts()

data.drop(['deviceMake','deviceModel','osVersion','merchantName','pgErrorDesc','Card_Last_4_Digits',],axis=1,inplace=True)

data.shape

data.head()

itpPassed=pd.get_dummies(data['itpPassed'],drop_first=True)
itpAttempted=pd.get_dummies(data['itpAttempted'],drop_first=True)
wibmoAppInstalled=pd.get_dummies(data['wibmoAppInstalled'],drop_first=True)
osType=pd.get_dummies(data['osType'],drop_first=True)
dataPickupExpiry=pd.get_dummies(data['dataPickupExpiry'],drop_first=True)
authRequested=pd.get_dummies(data['authRequested'],drop_first=True)
status3ds=pd.get_dummies(data['status3ds'],drop_first=True)
authStatus=pd.get_dummies(data['authStatus'],drop_first=True)
dataPickUpStatusMsg=pd.get_dummies(data['dataPickUpStatusMsg'],drop_first=True)
appLoginDone=pd.get_dummies(data['appLoginDone'],drop_first=True)
Ivr_Attempted=pd.get_dummies(data['Ivr_Attempted'],drop_first=True)
Ivr_Passed=pd.get_dummies(data['Ivr_Passed'],drop_first=True)
Iap_Txn_Type=pd.get_dummies(data['Iap_Txn_Type'],drop_first=True)
Charge_Card_On_Data_Pickup=pd.get_dummies(data['Charge_Card_On_Data_Pickup'],drop_first=True)
Amount_Known=pd.get_dummies(data['Amount_Known'],drop_first=True)

web_Attempted=pd.get_dummies(data['3DS_web_Attempted'],drop_first=True)

Web_Passed=pd.get_dummies(data['3DS_Web_Passed'],drop_first=True)

data = data.drop(['itpPassed','itpAttempted','wibmoAppInstalled','osType','dataPickupExpiry','authRequested',
                          'status3ds','authStatus','dataPickUpStatusMsg','appLoginDone','Ivr_Attempted','Ivr_Passed',
                                  'Iap_Txn_Type','Charge_Card_On_Data_Pickup','Amount_Known'],axis=1)

data = data.drop(['3DS_Web_Passed','3DS_web_Attempted'],axis=1)

data = pd.concat([data,itpPassed,itpAttempted,wibmoAppInstalled,osType,dataPickupExpiry,authRequested,
                 status3ds,authStatus,dataPickUpStatusMsg,appLoginDone,Ivr_Attempted,Ivr_Passed,Iap_Txn_Type,Charge_Card_On_Data_Pickup,
                                          Amount_Known,web_Attempted,Web_Passed],axis=1)

data.head()

data.info()

data.dtypes

data.drop(['Iap_Version','Agent_Comments'],axis=1,inplace=True)

data.dtypes

x = data.drop(['Observation'],axis=1)
y = data['Observation']

x.head()

y.head()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()

model.fit(x_train,y_train)

y_pre=model.predict(x_test)

from sklearn.metrics import confusion_matrix,accuracy_score

confusion_matrix(y_pre,y_test)

accuracy_score(y_pre,y_test)

